// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: proto/server.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Server_CreateAccount_FullMethodName                 = "/Server/CreateAccount"
	Server_QueryBalance_FullMethodName                  = "/Server/QueryBalance"
	Server_QueryBalance20_FullMethodName                = "/Server/QueryBalance20"
	Server_QueryTransaction20GasPrice_FullMethodName    = "/Server/QueryTransaction20GasPrice"
	Server_QueryNowBlockTrans_FullMethodName            = "/Server/QueryNowBlockTrans"
	Server_QueryPendingBlockTrans_FullMethodName        = "/Server/QueryPendingBlockTrans"
	Server_GenerateTransaction_FullMethodName           = "/Server/GenerateTransaction"
	Server_GenerateTransaction20_FullMethodName         = "/Server/GenerateTransaction20"
	Server_GenerateApprovalTransaction20_FullMethodName = "/Server/GenerateApprovalTransaction20"
)

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerClient interface {
	CreateAccount(ctx context.Context, in *GenerateAccountRequest, opts ...grpc.CallOption) (*GenerateAccountResponse, error)
	QueryBalance(ctx context.Context, in *QueryBalanceRequest, opts ...grpc.CallOption) (*QueryBalanceResponse, error)
	QueryBalance20(ctx context.Context, in *QueryBalance20Request, opts ...grpc.CallOption) (*QueryBalance20Response, error)
	QueryTransaction20GasPrice(ctx context.Context, in *QueryTransactionGasPriceRequest, opts ...grpc.CallOption) (*QueryTransactionGasPriceResponse, error)
	QueryNowBlockTrans(ctx context.Context, in *QueryNowBlockTransRequest, opts ...grpc.CallOption) (Server_QueryNowBlockTransClient, error)
	QueryPendingBlockTrans(ctx context.Context, in *QueryPendingBlockTransRequest, opts ...grpc.CallOption) (Server_QueryPendingBlockTransClient, error)
	GenerateTransaction(ctx context.Context, in *GenerateTransRequest, opts ...grpc.CallOption) (*GenerateTransResponse, error)
	GenerateTransaction20(ctx context.Context, in *GenerateTrans20Request, opts ...grpc.CallOption) (*GenerateTrans20Response, error)
	GenerateApprovalTransaction20(ctx context.Context, in *GenerateApprovalTrans20Request, opts ...grpc.CallOption) (*GenerateApprovalTrans20Response, error)
}

type serverClient struct {
	cc grpc.ClientConnInterface
}

func NewServerClient(cc grpc.ClientConnInterface) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) CreateAccount(ctx context.Context, in *GenerateAccountRequest, opts ...grpc.CallOption) (*GenerateAccountResponse, error) {
	out := new(GenerateAccountResponse)
	err := c.cc.Invoke(ctx, Server_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) QueryBalance(ctx context.Context, in *QueryBalanceRequest, opts ...grpc.CallOption) (*QueryBalanceResponse, error) {
	out := new(QueryBalanceResponse)
	err := c.cc.Invoke(ctx, Server_QueryBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) QueryBalance20(ctx context.Context, in *QueryBalance20Request, opts ...grpc.CallOption) (*QueryBalance20Response, error) {
	out := new(QueryBalance20Response)
	err := c.cc.Invoke(ctx, Server_QueryBalance20_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) QueryTransaction20GasPrice(ctx context.Context, in *QueryTransactionGasPriceRequest, opts ...grpc.CallOption) (*QueryTransactionGasPriceResponse, error) {
	out := new(QueryTransactionGasPriceResponse)
	err := c.cc.Invoke(ctx, Server_QueryTransaction20GasPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) QueryNowBlockTrans(ctx context.Context, in *QueryNowBlockTransRequest, opts ...grpc.CallOption) (Server_QueryNowBlockTransClient, error) {
	stream, err := c.cc.NewStream(ctx, &Server_ServiceDesc.Streams[0], Server_QueryNowBlockTrans_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serverQueryNowBlockTransClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Server_QueryNowBlockTransClient interface {
	Recv() (*QueryNowBlockTransResponse, error)
	grpc.ClientStream
}

type serverQueryNowBlockTransClient struct {
	grpc.ClientStream
}

func (x *serverQueryNowBlockTransClient) Recv() (*QueryNowBlockTransResponse, error) {
	m := new(QueryNowBlockTransResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serverClient) QueryPendingBlockTrans(ctx context.Context, in *QueryPendingBlockTransRequest, opts ...grpc.CallOption) (Server_QueryPendingBlockTransClient, error) {
	stream, err := c.cc.NewStream(ctx, &Server_ServiceDesc.Streams[1], Server_QueryPendingBlockTrans_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serverQueryPendingBlockTransClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Server_QueryPendingBlockTransClient interface {
	Recv() (*QueryPendingBlockTransResponse, error)
	grpc.ClientStream
}

type serverQueryPendingBlockTransClient struct {
	grpc.ClientStream
}

func (x *serverQueryPendingBlockTransClient) Recv() (*QueryPendingBlockTransResponse, error) {
	m := new(QueryPendingBlockTransResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serverClient) GenerateTransaction(ctx context.Context, in *GenerateTransRequest, opts ...grpc.CallOption) (*GenerateTransResponse, error) {
	out := new(GenerateTransResponse)
	err := c.cc.Invoke(ctx, Server_GenerateTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GenerateTransaction20(ctx context.Context, in *GenerateTrans20Request, opts ...grpc.CallOption) (*GenerateTrans20Response, error) {
	out := new(GenerateTrans20Response)
	err := c.cc.Invoke(ctx, Server_GenerateTransaction20_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GenerateApprovalTransaction20(ctx context.Context, in *GenerateApprovalTrans20Request, opts ...grpc.CallOption) (*GenerateApprovalTrans20Response, error) {
	out := new(GenerateApprovalTrans20Response)
	err := c.cc.Invoke(ctx, Server_GenerateApprovalTransaction20_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServer is the server API for Server service.
// All implementations must embed UnimplementedServerServer
// for forward compatibility
type ServerServer interface {
	CreateAccount(context.Context, *GenerateAccountRequest) (*GenerateAccountResponse, error)
	QueryBalance(context.Context, *QueryBalanceRequest) (*QueryBalanceResponse, error)
	QueryBalance20(context.Context, *QueryBalance20Request) (*QueryBalance20Response, error)
	QueryTransaction20GasPrice(context.Context, *QueryTransactionGasPriceRequest) (*QueryTransactionGasPriceResponse, error)
	QueryNowBlockTrans(*QueryNowBlockTransRequest, Server_QueryNowBlockTransServer) error
	QueryPendingBlockTrans(*QueryPendingBlockTransRequest, Server_QueryPendingBlockTransServer) error
	GenerateTransaction(context.Context, *GenerateTransRequest) (*GenerateTransResponse, error)
	GenerateTransaction20(context.Context, *GenerateTrans20Request) (*GenerateTrans20Response, error)
	GenerateApprovalTransaction20(context.Context, *GenerateApprovalTrans20Request) (*GenerateApprovalTrans20Response, error)
	mustEmbedUnimplementedServerServer()
}

// UnimplementedServerServer must be embedded to have forward compatible implementations.
type UnimplementedServerServer struct {
}

func (UnimplementedServerServer) CreateAccount(context.Context, *GenerateAccountRequest) (*GenerateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedServerServer) QueryBalance(context.Context, *QueryBalanceRequest) (*QueryBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBalance not implemented")
}
func (UnimplementedServerServer) QueryBalance20(context.Context, *QueryBalance20Request) (*QueryBalance20Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBalance20 not implemented")
}
func (UnimplementedServerServer) QueryTransaction20GasPrice(context.Context, *QueryTransactionGasPriceRequest) (*QueryTransactionGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTransaction20GasPrice not implemented")
}
func (UnimplementedServerServer) QueryNowBlockTrans(*QueryNowBlockTransRequest, Server_QueryNowBlockTransServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryNowBlockTrans not implemented")
}
func (UnimplementedServerServer) QueryPendingBlockTrans(*QueryPendingBlockTransRequest, Server_QueryPendingBlockTransServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryPendingBlockTrans not implemented")
}
func (UnimplementedServerServer) GenerateTransaction(context.Context, *GenerateTransRequest) (*GenerateTransResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTransaction not implemented")
}
func (UnimplementedServerServer) GenerateTransaction20(context.Context, *GenerateTrans20Request) (*GenerateTrans20Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTransaction20 not implemented")
}
func (UnimplementedServerServer) GenerateApprovalTransaction20(context.Context, *GenerateApprovalTrans20Request) (*GenerateApprovalTrans20Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateApprovalTransaction20 not implemented")
}
func (UnimplementedServerServer) mustEmbedUnimplementedServerServer() {}

// UnsafeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServer will
// result in compilation errors.
type UnsafeServerServer interface {
	mustEmbedUnimplementedServerServer()
}

func RegisterServerServer(s grpc.ServiceRegistrar, srv ServerServer) {
	s.RegisterService(&Server_ServiceDesc, srv)
}

func _Server_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).CreateAccount(ctx, req.(*GenerateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_QueryBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).QueryBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_QueryBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).QueryBalance(ctx, req.(*QueryBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_QueryBalance20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBalance20Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).QueryBalance20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_QueryBalance20_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).QueryBalance20(ctx, req.(*QueryBalance20Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_QueryTransaction20GasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTransactionGasPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).QueryTransaction20GasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_QueryTransaction20GasPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).QueryTransaction20GasPrice(ctx, req.(*QueryTransactionGasPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_QueryNowBlockTrans_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryNowBlockTransRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerServer).QueryNowBlockTrans(m, &serverQueryNowBlockTransServer{stream})
}

type Server_QueryNowBlockTransServer interface {
	Send(*QueryNowBlockTransResponse) error
	grpc.ServerStream
}

type serverQueryNowBlockTransServer struct {
	grpc.ServerStream
}

func (x *serverQueryNowBlockTransServer) Send(m *QueryNowBlockTransResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Server_QueryPendingBlockTrans_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryPendingBlockTransRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerServer).QueryPendingBlockTrans(m, &serverQueryPendingBlockTransServer{stream})
}

type Server_QueryPendingBlockTransServer interface {
	Send(*QueryPendingBlockTransResponse) error
	grpc.ServerStream
}

type serverQueryPendingBlockTransServer struct {
	grpc.ServerStream
}

func (x *serverQueryPendingBlockTransServer) Send(m *QueryPendingBlockTransResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Server_GenerateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTransRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GenerateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_GenerateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GenerateTransaction(ctx, req.(*GenerateTransRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_GenerateTransaction20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTrans20Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GenerateTransaction20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_GenerateTransaction20_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GenerateTransaction20(ctx, req.(*GenerateTrans20Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_GenerateApprovalTransaction20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateApprovalTrans20Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GenerateApprovalTransaction20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_GenerateApprovalTransaction20_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GenerateApprovalTransaction20(ctx, req.(*GenerateApprovalTrans20Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Server_ServiceDesc is the grpc.ServiceDesc for Server service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Server_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _Server_CreateAccount_Handler,
		},
		{
			MethodName: "QueryBalance",
			Handler:    _Server_QueryBalance_Handler,
		},
		{
			MethodName: "QueryBalance20",
			Handler:    _Server_QueryBalance20_Handler,
		},
		{
			MethodName: "QueryTransaction20GasPrice",
			Handler:    _Server_QueryTransaction20GasPrice_Handler,
		},
		{
			MethodName: "GenerateTransaction",
			Handler:    _Server_GenerateTransaction_Handler,
		},
		{
			MethodName: "GenerateTransaction20",
			Handler:    _Server_GenerateTransaction20_Handler,
		},
		{
			MethodName: "GenerateApprovalTransaction20",
			Handler:    _Server_GenerateApprovalTransaction20_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryNowBlockTrans",
			Handler:       _Server_QueryNowBlockTrans_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueryPendingBlockTrans",
			Handler:       _Server_QueryPendingBlockTrans_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/server.proto",
}
